

type ShoppingCard {
    ShoppingCard: ID
    # start
    id: ID
    pId: ID
    subProductsId: ID
    ShoppingCardRefCode: String
    uuid: String
    discountCardProduct: String
    comments: String
    cantProducts: Int
    refCodePid: String
    # end
    idUser: ID
    idStore: ID
    cName: String
    cState: Int
    cDatCre: DateTime
    cDatMod: DateTime
    csDescription: String
    getStore: Store
    productFood: ProductFood
    salesExtProductFoodOptional: [saleExtProductFoodOptional]
    ExtProductFoodsAll: [ExtProductFood]
}
type ResponseSalesStore {
  ShoppingCard: ShoppingCard
  Response: Response
}
# ShoppingCard Input
input IID_SUB {
  _id: ID
}

input IID_SUB_ITEMS {
  setID: [IID_SUB]
}

input ExtProductFoodInput {
  pId: String
  exPid: String
  exState: Int
  extraName: String
  extraPrice: Float
  state: Int
  pDatCre: String
  pDatMod: String
  quantity: Int
  newExtraPrice: Float
}
input ExtProductFoodSubOptionalInput {
  pId: String
  opExPid: String
  idStore: String
  opSubExPid: String
  OptionalSubProName: String
  exCodeOptionExtra: String
  exCode: String
  state: Int
  pDatCre: String
  pDatMod: String
  check: Boolean
}

input ExtProductFoodOptionalInput {
  pId: String
  opExPid: String
  OptionalProName: String
  state: Int
  code: String
  numbersOptionalOnly: Int
  pDatCre: String
  required: Int
  pDatMod: String
  ExtProductFoodsSubOptionalAll: [ExtProductFoodSubOptionalInput]
}


input IShoppingCard {
    ShoppingCard: ID
    id: ID
    pId: ID
    subProductsId: ID
    ShoppingCardRefCode: String
    uuid: String
    discountCardProduct: String
    idUser: ID
    idStore: ID
    cName: String
    comments: String
    cantProducts: Int
    ProPrice: Int
    refCodePid: String
    totalExtra: Int
    cState: Int
    cDatCre: DateTime
    cDatMod: DateTime
    csDescription: String,
    dataExtra: [ExtProductFoodInput]
    dataOptional: [ExtProductFoodOptionalInput]
}

# Query
type Query {
  getAllShoppingCard: [ShoppingCard]
  getTodaySales: Int
}
# Mutations
type Mutation {
  registerShoppingCard(input: IShoppingCard, idSubArray: IID_SUB_ITEMS): ShoppingCard
  # sales store
  registerSalesStore(input: [IShoppingCard], id: ID, discount: Int, idStore: ID, pCodeRef: String, change: String, payMethodPState: Int, pickUp: Int, totalProductsPrice: Float, valueDelivery: Float, idSubArray: IID_SUB_ITEMS): ResponseSalesStore

  deleteOneItem(cState: Int,ShoppingCard: ID): Response
}
